using Unity.Collections;
using Unity.Core;
using Unity.Entities;

namespace Anvil.Unity.DOTS.Entities.TaskDriver
{
    /// <summary>
    /// An object generated by an <see cref="IJobConfig"/> to allow for populating job structs with the data they
    /// need in their constructors.
    /// </summary>
    public abstract class AbstractJobData
    {
        private readonly AbstractJobConfig m_JobConfig;

        /// <summary>
        /// Reference to the <see cref="World"/> this job will be running in.
        /// </summary>
        public World World { get; }

        /// <summary>
        /// Convenience helper to get the <see cref="TimeData"/> for delta time and other related functions.
        /// </summary>
        public ref readonly TimeData Time
        {
            get => ref World.Time;
        }

        protected AbstractJobData(IJobConfig jobConfig)
        {
            m_JobConfig = (AbstractJobConfig)jobConfig;
            World = m_JobConfig.TaskSetOwner.World;
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill(out CancelRequestsWriter instance)
        {
            CancelRequestsDataStream cancelRequestDataStream = m_JobConfig.GetCancelRequestsDataStream();
            instance = cancelRequestDataStream.CreateCancelRequestsWriter();
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill<TInstance>(out DataStreamPendingWriter<TInstance> instance)
            where TInstance : unmanaged, IEntityKeyedTask
        {
            EntityProxyDataStream<TInstance> dataStream = m_JobConfig.GetPendingDataStream<TInstance>(AbstractJobConfig.Usage.Default);
            instance = dataStream.CreateDataStreamPendingWriter();
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill<TInstance>(out DataStreamActiveReader<TInstance> instance)
            where TInstance : unmanaged, IEntityKeyedTask
        {
            EntityProxyDataStream<TInstance> dataStream = m_JobConfig.GetActiveDataStream<TInstance>(AbstractJobConfig.Usage.Default);
            instance = dataStream.CreateDataStreamActiveReader();
        }

        
        //*************************************************************************************************************
        // ENTITY SPAWNER
        //*************************************************************************************************************
        
        public void Fulfill(out EntitySpawner entitySpawner)
        {
            entitySpawner = m_JobConfig.GetEntitySpawner();
        }

        //*************************************************************************************************************
        // NATIVE ARRAY
        //*************************************************************************************************************

        /// <summary>
        /// Gets <typeparamref name="TData"/> for reading from in a shared-read context in a job.
        /// </summary>
        /// <typeparam name="TData">The type of data to read from.</typeparam>
        /// <returns>The <typeparamref name="TData"/> to read from.</returns>
        public TData GetGenericDataForReading<TData>()
            where TData : struct
        {
            return m_JobConfig.GetGenericDataForReading<TData>();
        }

        /// <summary>
        /// Gets <typeparamref name="TData"/> for writing to in a shared-write context in a job.
        /// </summary>
        /// <typeparam name="TData">The type of data to write to.</typeparam>
        /// <returns>The <typeparamref name="TData"/> to write to.</returns>
        public TData GetGenericDataForSharedWriting<TData>()
            where TData : struct
        {
            return m_JobConfig.GetGenericDataForSharedWriting<TData>();
        }

        /// <summary>
        /// Gets <typeparamref name="TData"/> for writing to in an exclusive-write context in a job.
        /// </summary>
        /// <typeparam name="TData">The type of data to write to.</typeparam>
        /// <returns>The <typeparamref name="TData"/> to write to.</returns>
        public TData GetGenericDataForExclusiveWriting<TData>()
            where TData : struct
        {
            return m_JobConfig.GetGenericDataForExclusiveWriting<TData>();
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill<TData>(out ThreadPersistentDataAccessor<TData> instance)
            where TData : unmanaged, IThreadPersistentDataInstance
        {
            m_JobConfig.Fulfill(out ThreadPersistentData<TData> persistentData);
            instance = persistentData.CreateThreadPersistentDataAccessor();
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill<TData>(out EntityPersistentDataReader<TData> instance)
            where TData : unmanaged, IEntityPersistentDataInstance
        {
            m_JobConfig.Fulfill(out EntityPersistentData<TData> persistentData);
            instance = persistentData.CreateEntityPersistentDataReader();
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill<TData>(out EntityPersistentDataWriter<TData> instance)
            where TData : unmanaged, IEntityPersistentDataInstance
        {
            m_JobConfig.Fulfill(out EntityPersistentData<TData> persistentData);
            instance = persistentData.CreateEntityPersistentDataWriter();
        }

        //*************************************************************************************************************
        // ENTITY QUERY
        //*************************************************************************************************************

        /// <summary>
        /// Gets a <see cref="NativeArray{Entity}"/> to read from in a job from an <see cref="EntityQuery"/>
        /// </summary>
        /// <returns>The <see cref="NativeArray{Entity}"/></returns>
        public NativeArray<Entity> GetEntityNativeArrayFromQuery()
        {
            return m_JobConfig.GetEntityNativeArrayFromQuery();
        }

        /// <summary>
        /// Gets a <see cref="NativeArray{T}"/> to read from in a job from an <see cref="EntityQuery"/>
        /// </summary>
        /// <typeparam name="T">The type of <see cref="IComponentData"/> in the array.</typeparam>
        /// <returns>The <see cref="NativeArray{T}"/></returns>
        public NativeArray<T> GetIComponentDataNativeArrayFromQuery<T>()
            where T : struct, IComponentData
        {
            return m_JobConfig.GetIComponentDataNativeArrayFromQuery<T>();
        }

        //*************************************************************************************************************
        // CDFE
        //*************************************************************************************************************

        //TODO: #86 - Revisit this section after Entities 1.0 upgrade for name changes to CDFE
        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill<T>(out CDFEReader<T> instance)
            where T : struct, IComponentData
        {
            m_JobConfig.Fulfill(out instance);
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill<T>(out CDFEWriter<T> instance)
            where T : struct, IComponentData
        {
            m_JobConfig.Fulfill(out instance);
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill<T>(out DBFEForRead<T> instance)
            where T : struct, IBufferElementData
        {
            m_JobConfig.Fulfill(out instance);
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill<T>(out DBFEForExclusiveWrite<T> instance)
            where T : struct, IBufferElementData
        {
            m_JobConfig.Fulfill(out instance);
        }

        //*************************************************************************************************************
        // ENTITY COMMAND BUFFER
        //*************************************************************************************************************

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill(out EntityCommandBuffer instance)
        {
            m_JobConfig.Fulfill(out instance);
        }

        /// <summary>
        /// Fulfills an instance of the provided type for the job.
        /// </summary>
        public void Fulfill(out EntityCommandBuffer.ParallelWriter instance)
        {
            m_JobConfig.Fulfill(out instance);
        }
    }
}